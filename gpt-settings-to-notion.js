const { Client } = require("@notionhq/client")
require('dotenv').config()

const notion = new Client({
    auth: process.env.NOTION_TOKEN,
})
const database_id = process.env.NOTION_DATABASE_ID

const name = 'GPT-3 + Notion = <3'
const props = `
engine="davinci",
prompt="The following is a conversation with an AI assistant. The assistant is helpful, creative, clever, and very friendly.\n\nHuman: Hello, who are you?\nAI: I am an AI created by OpenAI. How can I help you today?\nHuman: ",
temperature=0.9,
max_tokens=150,
top_p=1,
frequency_penalty=0,
presence_penalty=0.6,
stop=["\n", " Human:", " AI:"]
`

/*
The code is converting the variables from a string to an object.
- generated by stenography 🤖
*/
const convert_variables = (str) => {
    const openai_vars = {}
    const str_split_by_comma = str.split(',\n')
    const engine = str_split_by_comma[str_split_by_comma.findIndex(x => x.includes("engine"))].split('=')[1].replaceAll("\"", "").trim()
    const prompt = str_split_by_comma[str_split_by_comma.findIndex(x => x.includes("prompt"))].split('=')[1]
    const temperature = str_split_by_comma[str_split_by_comma.findIndex(x => x.includes("temperature"))].split('=')[1].trim()
    const max_tokens = str_split_by_comma[str_split_by_comma.findIndex(x => x.includes("max_tokens"))].split('=')[1].trim()
    const top_p = str_split_by_comma[str_split_by_comma.findIndex(x => x.includes("top_p"))].split('=')[1].trim()
    const frequency_penalty = str_split_by_comma[str_split_by_comma.findIndex(x => x.includes("frequency_penalty"))].split('=')[1].trim()
    const presence_penalty = str_split_by_comma[str_split_by_comma.findIndex(x => x.includes("presence_penalty"))].split('=')[1].trim()
                                    /*
                                    This code is finding the index of the string "stop" in a list of strings.
                                    It then replaces a new line with an escaped new line.
                                    - generated by stenography 🤖
                                    */
    const stop = str_split_by_comma[str_split_by_comma.findIndex(x => x.includes("stop"))].split('=')[1].replace('\n', '\\n').trim()

    openai_vars.engine = engine
    openai_vars.prompt = prompt
    openai_vars.temperature = temperature
    openai_vars.max_tokens = max_tokens
    openai_vars.top_p = top_p
    openai_vars.frequency_penalty = frequency_penalty
    openai_vars.presence_penalty = presence_penalty
    openai_vars.stop = stop

    return openai_vars
}


/*
This code is creating a new page in the notion.pages collection.
- generated by stenography 🤖
*/ 
const add_api_page = async ({ name = `Playground Prompt: ${new Date().getMonth()}/${new Date().getDate()}::${new Date().getHours()}:${new Date().getMinutes()}`, engine = '', prompt = '', temperature = 0.0, max_tokens = 64, top_p = 1, frequency_penalty = 0, presence_penalty = 0, stop = '' }) => {
    const response = await notion.pages.create({
        parent: {
            database_id,
        },
        properties: {
            Name: {
                title: [
                    {
                        text: {
                            content: name,
                        },
                    },
                ],
            },
            temperature: {
                number: Number(temperature),
            },
            top_p: {
                number: Number(top_p),
            },
            frequency_penalty: {
                number: Number(frequency_penalty),
            },
            presence_penalty: {
                number: Number(presence_penalty),
            },
            max_tokens: {
                number: Number(max_tokens),
            },
            stop: {
                rich_text: [{ "type": "text", "text": { "content": stop } }]
            },
            'engine': {
                select: {
                    name: engine,
                },
            },
        },
        children: [
            {
                object: 'block',
                type: 'heading_2',
                heading_2: {
                  text: [
                    {
                      type: 'text',
                      text: {
                        content: 'Prompt',
                      },
                    },
                  ],
                },
            },
            {
                object: 'block',
                type: 'paragraph',
                paragraph: {
                    text: [
                        {
                            type: 'text',
                            text: {
                                content: prompt,
                            },
                        },
                    ],
                },
            },
        ],
    });
    return response;
}

/*
This code is creating a function called main that takes two parameters, name and props. 
It creates the object that will be put into Notion.
- generated by stenography 🤖
*/
const main = async (name, props) => {
    try {
        const openai_vars = convert_variables(props)
        openai_vars.name = name
    
        const res = await add_api_page(openai_vars)
        console.log(res)
        console.log(`New page successfully added at: ${res.url}`)
    } catch (err) {
        throw new Error(err)
    }
}

main(name, props)

